** Dependencies **
Monitoring::Zabipi has the following dependencies:
1) Date::Parse
Reason: used by queue.get native method
2) LWP::UserAgent
Reason: used to make POST requests to the Zabbix frontend
3) JSON
Reason: Used to assemble JSON-strings from Perl datastructures when making requests and to decompile JSON strings, received from the Zabbix frontend, to Perl datastructures
4) JSON::XS
Reason: JSON pretty printing in debug mode (see flPrettyJSON flag description)

** Installation **
You have two different choices where to place Zabipi.pm

1) Make directory Monitoring in some "unusual" place
In this case you must add the directory containing the previously created "Monitoring" subfolder to the @INC global array.
Doing so in your program is as simple as push @INC,$dir or unshift @INC,$dir at the BEGIN block. Refer to the Perl documentation to know how to do it globally and "permanently".
You can also simply insert "use lib 'DIRECTORY';" somewhere before "use Monitoring::Zabipi;"

Example commands to do installation in described manner:
---
mkdir -p /opt/Perl5/libs/Monitoring
git clone https://github.com/DRVTiny/Zabipi.git /opt/Perl5/libs/Monitoring
---
After that you can include this line in  your perl script:
---
use lib '/opt/Perl5/libs';
---
2) Make directory Monitoring in the one of the directories, which already are in the @INC global array.
To view the contents of the @INC array, you may use this command:
 perl -e 'print "  \@INC:\n\t".join("\n\t",@INC)."\n"'
or simply type perl -V and look at the newline-separated list of directories right after "@INC:"

After you have Monitoring folder, copy Zabipi.pm to it.

Example:
If you prefer to not drop Monitoring::Zabipi to the one of your system pathes, you may use this code snippet:
---
BEGIN {
 unshift @INC, '/MONITORING/FOLDER/PATH';
}

use Monitoring::Zabipi qw(zbx zbx_last_err);
---

** Usage **
I advice to copy prologue.pl and setenv.conf from examples/ to YOUR_SCRIPT.pl and setenv.conf respectively 
setenv.conf must be in the same directory as YOUR_SCRIPT.pl
Than add your code in YOUR_SCRIPT.pl after line "# Your code goes here ->"
For example it may be:
---
print zbx('host.get',{'search'=>{'host'=>'*jupiter*'},'output'=>['hostid']})->[0]{'hostid'},"\n";
---
To know well what the hell happens when you get error about "Cant authorize you on" - try to run 
---
YOUR_SCRIPT.pl -x
---
